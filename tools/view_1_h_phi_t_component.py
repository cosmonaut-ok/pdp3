#!/usr/bin/env python3

import sys
import os

import argparse

from numpy import *
from pylab import *

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as ani

from lib.parameters import Parameters
from lib.pdp3_plot_builder import PDP3PlotBuilder

from lib.pdp_1_h_phi_t_view_builder import Pdp1HTViewBuilder

## README:
## color map reference: https://matplotlib.org/examples/color/colormaps_reference.html
## mathtext reference:  https://matplotlib.org/users/mathtext.html

class Pdp1View(Pdp1HTViewBuilder):
    def __init__(self, cfg):
        super(Pdp1View, self).__init__(cfg)

    def setup_1h_view(self):
        '''
        initialize plot figure and subplots with preset object fields
        '''
        super(Pdp1View, self).setup_1h_view()

        mgr = self._plot_builder.figure.canvas.manager
        if matplotlib.get_backend() == 'Qt5Agg':  # 'Qt4' backend
            mgr.window.showMaximized()
        elif matplotlib.get_backend() == 'Qt4Agg':  # 'Qt4' backend
            mgr.window.showMaximized()
        elif matplotlib.get_backend() == 'WxAgg':  # 'WxAgg' backend
            mgr.frame.Maximize(True)
        elif matplotlib.get_backend() == 'TKAgg':  # 'TKAgg' backend
            matplotlib.frame.Maximize(True)

        self._plot_builder.figure.show()


    def create_view_with_2_plots(self):
        super(Pdp1View, self).create_view_with_2_plots()
        self._plot_builder.redraw()

def main():
    parser = argparse.ArgumentParser(description='Tool for visualization of data, generated by PDP3.')
    parser.add_argument('properties_path', metavar='properties_path', type=str,
                        help='Full path to properties.xml')

    default_data_set_range = [0, 10000]

    parser.add_argument('--range-h-phi', type=str,
                        help='Limit range for Magnetic field rotational component')

    parser.add_argument('--with-grid', action='store_true', help='Use tick grid for plots')

    parser.add_argument('--radius', type=float, help='Radius to generate plot at')

    parser.add_argument('--longitude', type=float, help='Longitude to generate plot at')

    parser.add_argument('--time-range', type=str, help='Time range')

    parser.add_argument('--data-set-range', type=str,
                        help='''Range of data files set (e.g. 2:10 is E_r2 to Er_10, E_z2 to E_z10 and so on).
                        Can be overriden by --time-range. Default is calculated''')

    args = parser.parse_args()

    # check if config file exists
    if os.path.isfile(args.properties_path):
        ## initialize config
        config = Parameters(args.properties_path)
        view = Pdp1View(config)

        ################################################################################################
        #################### configure plot and view parameters #######################################
        ################################################################################################
        if args.range_h_phi: view.range_h_field_phi = list(map(float, args.range_h_phi.split(':')))

        if args.time_range:
            time_range = list(map(float, args.time_range.split(':')))
            view.start_data_set, view.start_frame = config.get_file_frame_number_by_timestamp(time_range[0])
            view.end_data_set, view.end_frame = config.get_file_frame_number_by_timestamp(time_range[1])
        elif args.data_set_range:
            data_set_range = list(map(int, args.data_set_range.split(':')))
            view.start_data_set = data_set_range[0]
            view.end_data_set = data_set_range[1]

        ################################################################################################
        ################################################################################################
        ################################################################################################

        if args.radius:
            view.radius = args.radius

        if args.longitude:
            view.longitude = args.longitude

        view.use_grid = args.with_grid

        view.setup_1h_view()
        view.create_view_with_1_plot()
        input("Press 'Return' to exit ")
    else:
        print("Configuration file `%s' does not exists. Exiting" % args.properties_path)
        exit(1)

## call main function
if __name__ == "__main__":
    main()
