#!/usr/bin/env python3

import sys
import os

import argparse

from numpy import *
from pylab import *

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as ani

from lib.parameters import Parameters
from lib.pdp3_plot_builder import PDP3PlotBuilder

from lib.pdp_2_et_view_builder import Pdp2ETViewBuilder

## README:
## color map reference: https://matplotlib.org/examples/color/colormaps_reference.html
## mathtext reference:  https://matplotlib.org/users/mathtext.html

class Pdp2Image(Pdp2ETViewBuilder):
    def __init__(self, cfg):
        super(Pdp2Image, self).__init__(cfg)

    def setup_2e_view(self, view):
        '''
        initialize plot figure and subplots with preset object fields
        '''
        self.image_path = '.'
        super(Pdp2Image, self).setup_2e_view()

        if view:
            self._plot_builder.figure.show()

    def create_view_with_2_plots(self, view, write):
        super(Pdp2Image, self).create_view_with_2_plots()

        image_file_name = os.path.join(self.image_path, 'image_2_et_' + str(self.longitude) + 'm_' + str(self.radius) + 'm.png')

        if write:
            self._plot_builder.figure.savefig(image_file_name) # save the figure to file
        if view:
            self._plot_builder.redraw()


def main():
    parser = argparse.ArgumentParser(description='Tool for visualization of data, generated by PDP3.')
    parser.add_argument('properties_path', metavar='properties_path', type=str,
                        help='Full path to properties.xml')

    default_data_set_range = [0, 10000]

    parser.add_argument('--with-grid', action='store_true', help='Use tick grid for plots')
    
    parser.add_argument('--radius', type=float, help='Radius to generate plot at')

    parser.add_argument('--longitude', type=float, help='Longitude to generate plot at')

    parser.add_argument('--time-range', type=str, help='Time range')

    parser.add_argument('--data-set-range', type=str,
                        help='''Range of data files set (e.g. 2:10 is E_r2 to Er_10, E_z2 to E_z10 and so on).
                        Can be overriden by --time-range. Default is calculated''')

    parser.add_argument('--dry-run', action='store_true', help='Do not write anything. Just for debug')

    parser.add_argument('--view', action='store_true', default=False,
                        help='View animation as well as write it to file')

    args = parser.parse_args()

    view=False
    write=True

    if args.view:
        view = True
    if args.dry_run:
        write = False

    # check if config file exists
    if os.path.isfile(args.properties_path):
        ## initialize config
        config = Parameters(args.properties_path)
        image = Pdp2Image(config)

        ################################################################################################
        #################### configure plot and image parameters #######################################
        ################################################################################################
        if args.time_range:
            time_range = list(map(float, args.time_range.split(':')))
            image.start_data_set, image.start_frame = config.get_file_frame_number_by_timestamp(time_range[0])
            image.end_data_set, image.end_frame = config.get_file_frame_number_by_timestamp(time_range[1])
        elif args.data_set_range:
            data_set_range = list(map(int, args.data_set_range.split(':')))
            image.start_data_set = data_set_range[0]
            image.end_data_set = data_set_range[1]

        ################################################################################################
        ################################################################################################
        ################################################################################################

        if args.radius:
            image.radius = args.radius

        if args.longitude:
            image.longitude = args.longitude

        image.use_grid = args.with_grid

        image.setup_2e_view(view)
        image.create_view_with_2_plots(view, write)
        if view:
            input("Press 'Return' to exit ")
    else:
        print("Configuration file `%s' does not exists. Exiting" % args.properties_path)
        exit(1)

## call main function
if __name__ == "__main__":
    main()
